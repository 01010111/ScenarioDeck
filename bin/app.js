// Generated by Haxe 4.0.0-rc.5+4a745347f
(function ($hx_exports, $global) { "use strict";
$hx_exports["themes"] = $hx_exports["themes"] || {};
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var App = $hx_exports["App"] = function() {
	this.last = 0.0;
	var _gthis = this;
	App.i = this;
	PIXI.Application.call(this,{ width : window.document.documentElement.clientWidth, height : window.document.documentElement.clientHeight, backgroundColor : 16777215, antialias : true, roundPixels : true, clearBeforeRender : true, forceFXAA : true, powerPreference : "high-performance", autoResize : true, legacy : App.theme.legacy});
	window.addEventListener("resize",function() {
		_gthis.renderer.resize(window.document.documentElement.clientWidth,window.document.documentElement.clientHeight);
		util_ResizeUtil.resize();
		return;
	});
	window.document.body.appendChild(this.view);
	window.requestAnimationFrame($bind(this,this.update));
	this.content_container = new objects_ContentContainer();
	this.stage.addChild(this.content_container);
	this.content_container.load_card("Title");
};
App.main = function() {
	console.log("src/App.hx:20:","Scenario Deck loading...");
};
App.init = function(deck,theme) {
	if(theme == null) {
		theme = "simple";
	}
	App.deck = deck;
	App.theme = App.get_theme(theme);
	var _g = [];
	var _g1 = 0;
	while(_g1 < deck.length) {
		var card = deck[_g1];
		++_g1;
		var _g11 = 0;
		var _g2 = card.content;
		while(_g11 < _g2.length) {
			var item = _g2[_g11];
			++_g11;
			if(item.type.toLowerCase() == "image" || item.type.toLowerCase() == "article") {
				_g.push(item.src);
			}
		}
	}
	var images = _g;
	zero_extensions_ArrayExt.remove_duplicates(images);
	var loader = new PIXI.loaders.Loader();
	loader.add(images);
	loader.on("progress",function() {
		console.log("src/App.hx:28:",loader.progress);
		return;
	});
	loader.on("complete",function() {
		return App.i = new App();
	});
	loader.load();
};
App.get_theme = function(theme) {
	if(theme == "simple") {
		return new themes_Simple();
	} else {
		return new themes_Simple();
	}
};
App.__super__ = PIXI.Application;
App.prototype = $extend(PIXI.Application.prototype,{
	update: function(time) {
		var dt = this.get_dt(time);
		zero_utilities_Timer.update(dt);
		window.requestAnimationFrame($bind(this,this.update));
	}
	,get_dt: function(time) {
		var out = (time - this.last) / 1000;
		this.last = time;
		return out;
	}
});
var HxOverrides = function() { };
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = $global.$haxeUID++);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.prototype = {
	get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
};
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
haxe_iterators_MapKeyValueIterator.prototype = {
	hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
};
var objects_ContentContainer = function() {
	this.content_array = [];
	this.loaded = false;
	var _gthis = this;
	PIXI.Container.call(this);
	util_ResizeUtil.resize_map.set(this,function() {
		_gthis.resize();
		return;
	});
	window.addEventListener("wheel",function(e) {
		_gthis.scroll(e.deltaY);
		return;
	});
	window.addEventListener("touchstart",function(e1) {
		_gthis.touch_start(e1.touches[0]);
		return;
	});
	window.addEventListener("touchmove",function(e2) {
		_gthis.touch_move(e2.touches[0]);
		return;
	});
};
objects_ContentContainer.__super__ = PIXI.Container;
objects_ContentContainer.prototype = $extend(PIXI.Container.prototype,{
	touch_start: function(e) {
		this.last_y = e.clientY;
		this.total_move = 0;
	}
	,touch_move: function(e) {
		var delta = this.last_y - e.clientY;
		this.scroll(delta);
		this.total_move += delta;
		this.last_y = e.clientY;
	}
	,load_card: function(title) {
		this.padding = App.theme.padding * 3;
		console.log("src/objects/ContentContainer.hx:43:","Loading card: " + title);
		if(this.loaded) {
			this.unload_card(title);
			return;
		}
		this.y = 0;
		var card = util_CardManager.get_card(title);
		var last_y = App.theme.padding;
		var _g = 0;
		var _g1 = card.content;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if(item.flag != null) {
				if(!util_FlagManager.get(item.flag)) {
					continue;
				}
			}
			var content_item;
			switch(item.type.toLowerCase()) {
			case "article":
				content_item = App.theme.load_article(item.text,item.src,item.url);
				break;
			case "button":
				content_item = App.theme.load_button(item.text,item.url);
				break;
			case "flag":
				util_FlagManager.set(item.text,item.value != null ? item.value : true);
				content_item = new PIXI.Container();
				break;
			case "image":
				content_item = App.theme.load_image(item.src,item.display);
				break;
			case "paragraph":
				content_item = App.theme.load_paragraph(item.text);
				break;
			case "points":
				util_PointsManager.receive_pts(title,item.amt);
				content_item = new PIXI.Container();
				break;
			case "textbox":
				content_item = App.theme.load_textbox(item.text);
				break;
			default:
				content_item = new PIXI.Container();
			}
			if(item.type == "image" && item.display == "full-width" && last_y == App.theme.padding) {
				last_y = 0;
				this.padding = App.theme.padding * 2;
			}
			content_item.position.y = last_y;
			last_y += content_item.height + App.theme.margin;
			this.content_array.push(content_item);
			this.addChild(content_item);
		}
		this.loaded = true;
	}
	,unload_card: function(next) {
		var _gthis = this;
		console.log("src/objects/ContentContainer.hx:77:","unloading " + this.content_array.length + " objects");
		zero_utilities_Timer.get(App.theme.unload(this.content_array),function() {
			while(_gthis.content_array.length > 0) {
				var tmp = _gthis.content_array.shift();
				_gthis.destroy_object(tmp);
			}
			_gthis.loaded = false;
			_gthis.load_card(next);
			return;
		});
	}
	,destroy_object: function(object) {
		util_ResizeUtil.resize_map.remove(object);
		object.destroy(false);
	}
	,resize: function() {
		var last_y = App.theme.padding;
		var _g = 0;
		var _g1 = this.content_array;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.y = last_y;
			last_y += item.height + App.theme.margin;
		}
		this.scroll(0);
	}
	,scroll: function(delta) {
		this.y -= delta;
		this.y = Math.min(Math.max(this.y,-(this.height + this.padding) + App.i.renderer.height),0);
	}
});
var themes_Simple = $hx_exports["themes"]["Simple"] = function() {
	this.legacy = true;
	this.margin = 24;
	this.padding = 48;
};
themes_Simple.resize_sprite = function(sprite,display) {
	var target_width = App.i.renderer.width - (display == "full-width" ? 0 : App.theme.padding * 2);
	var scale_amt = Math.min(target_width / sprite.texture.baseTexture.width,1);
	sprite.scale.set(scale_amt);
	sprite.x = App.i.renderer.width / 2;
};
themes_Simple.resize_button = function(button,text) {
	button.x = App.theme.padding;
	var target_width = App.i.renderer.width - App.theme.padding * 2;
	if(button.width < target_width) {
		return;
	}
	text.style.wordWrapWidth = App.i.renderer.width - (App.theme.padding * 2 + App.theme.margin * 4);
	button.clear();
	button.beginFill(33023);
	button.drawRoundedRect(0,0,target_width,text.height + App.theme.margin,(text.height + App.theme.margin) / 2);
	button.endFill();
	text.position.set(button.width / 2,button.height / 2);
};
themes_Simple.resize_text = function(text,margin) {
	text.style.wordWrapWidth = App.i.renderer.width - margin * 2;
	text.x = App.theme.padding;
};
themes_Simple.resize_article = function(container,sprite,text,box) {
	var target_width = App.i.renderer.width - App.theme.padding * 2;
	var scale_amt = target_width / sprite.texture.baseTexture.width;
	sprite.scale.set(scale_amt);
	text.style.wordWrapWidth = target_width - App.theme.margin * 2;
	text.y = sprite.height - App.theme.margin;
	box.scale.set(sprite.width,text.height + App.theme.margin * 2);
	box.y = sprite.height;
	container.x = App.theme.padding;
};
themes_Simple.resize_textbox = function(box,text) {
	text.style.wordWrapWidth = App.i.renderer.width - (App.theme.padding * 2 + App.theme.margin * 2);
	box.clear();
	box.beginFill(6316125);
	box.drawRoundedRect(0,0,App.i.renderer.width - App.theme.padding * 2,text.height + App.theme.margin * 2,8);
	box.endFill();
	box.x = App.theme.padding;
};
themes_Simple.prototype = {
	load_image: function(src,display) {
		var out = PIXI.Sprite.fromImage(src);
		out.anchor.set(0.5,0);
		themes_Simple.resize_sprite(out,display);
		util_ResizeUtil.resize_map.set(out,function() {
			themes_Simple.resize_sprite(out,display);
			return;
		});
		out.alpha = 0;
		zero_utilities_Timer.get(App.i.content_container.content_array.length * 0.2,function() {
			return TweenMax.to(out,0.25,{ alpha : 1});
		});
		return out;
	}
	,load_paragraph: function(text) {
		var _gthis = this;
		var text1 = new PIXI.Text(text,themes_Styles.text_main);
		util_ResizeUtil.resize_map.set(text1,function() {
			themes_Simple.resize_text(text1,_gthis.padding);
			return;
		});
		themes_Simple.resize_text(text1,this.padding);
		text1.alpha = 0;
		zero_utilities_Timer.get(App.i.content_container.content_array.length * 0.2,function() {
			return TweenMax.to(text1,0.25,{ alpha : 1});
		});
		return text1;
	}
	,load_textbox: function(text) {
		var box = new PIXI.Graphics();
		var text1 = new PIXI.Text(text,themes_Styles.text_textbox);
		text1.position.set(this.margin,this.margin);
		util_ResizeUtil.resize_map.set(box,function() {
			themes_Simple.resize_textbox(box,text1);
			return;
		});
		themes_Simple.resize_textbox(box,text1);
		box.addChild(text1);
		box.alpha = 0;
		zero_utilities_Timer.get(App.i.content_container.content_array.length * 0.2,function() {
			return TweenMax.to(box,0.25,{ alpha : 1});
		});
		return box;
	}
	,load_button: function(text,url) {
		var text1 = new PIXI.Text(text,themes_Styles.text_button);
		var box = new PIXI.Graphics();
		box.beginFill(33023);
		box.drawRoundedRect(0,0,text1.width + this.margin * 4,text1.height + this.margin,(text1.height + this.margin) / 2);
		box.endFill();
		box.interactive = true;
		box.buttonMode = true;
		box.on("pointertap",function() {
			util_LinkManager.go_to_link(url);
			return;
		});
		text1.anchor.set(0.5);
		text1.position.set(box.width / 2,box.height / 2);
		box.addChild(text1);
		util_ResizeUtil.resize_map.set(box,function() {
			themes_Simple.resize_button(box,text1);
			return;
		});
		themes_Simple.resize_button(box,text1);
		box.alpha = 0;
		zero_utilities_Timer.get(App.i.content_container.content_array.length * 0.2,function() {
			return TweenMax.to(box,0.25,{ alpha : 1});
		});
		return box;
	}
	,load_article: function(text,src,url) {
		var container = new PIXI.Container();
		container.interactive = true;
		container.buttonMode = true;
		container.on("pointertap",function() {
			util_LinkManager.go_to_link(url);
			return;
		});
		var image = PIXI.Sprite.fromImage(src);
		var box = new PIXI.Graphics();
		box.beginFill(0,0.75);
		box.drawRect(0,0,1,1);
		box.endFill();
		box.pivot.set(0,1);
		var subtitle = new PIXI.Text(text,themes_Styles.text_button);
		subtitle.anchor.set(0,1);
		subtitle.x = this.margin;
		container.addChild(image);
		container.addChild(box);
		container.addChild(subtitle);
		util_ResizeUtil.resize_map.set(container,function() {
			themes_Simple.resize_article(container,image,subtitle,box);
			return;
		});
		themes_Simple.resize_article(container,image,subtitle,box);
		container.alpha = 0;
		zero_utilities_Timer.get(App.i.content_container.content_array.length * 0.2,function() {
			return TweenMax.to(container,0.25,{ alpha : 1});
		});
		return container;
	}
	,load_points: function(amt) {
		var alert = new PIXI.Graphics();
		alert.beginFill(3194880);
		alert.drawRoundedRect(-128,-32,256,64,16);
		alert.endFill();
		var text = new PIXI.Text("You earned " + amt + " points!",themes_Styles.text_button);
		text.anchor.set(0.5);
		alert.addChild(text);
		alert.position.set(App.i.renderer.width / 2,App.i.renderer.height + 40);
		App.i.stage.addChild(alert);
		TweenMax.to(alert,1,{ y : App.i.renderer.height - 64});
		zero_utilities_Timer.get(5,function() {
			return TweenMax.to(alert,1,{ y : App.i.renderer.height + 40, onComplete : function() {
				alert.destroy();
				return;
			}});
		});
		return new PIXI.Container();
	}
	,unload: function(arr) {
		var i = 0.2;
		var _g = 0;
		while(_g < arr.length) {
			var obj = arr[_g];
			++_g;
			TweenMax.to(obj,i,{ alpha : 0});
		}
		return i;
	}
};
var themes_Styles = function() { };
var util_CardManager = function() { };
util_CardManager.get_card = function(title) {
	var _g = 0;
	var _g1 = App.deck;
	while(_g < _g1.length) {
		var card = _g1[_g];
		++_g;
		if(card.title == title) {
			return card;
		}
	}
	console.log("src/util/CardManager.hx:7:","No card with title \"" + title + "\"");
	return { title : "Blank", content : []};
};
util_CardManager.exists = function(title) {
	var _g = 0;
	var _g1 = App.deck;
	while(_g < _g1.length) {
		var card = _g1[_g];
		++_g;
		if(card.title == title) {
			return true;
		}
	}
	return false;
};
var util_FlagManager = function() { };
util_FlagManager.set = function(flag,value) {
	var _this = util_FlagManager.map;
	if(__map_reserved[flag] != null) {
		_this.setReserved(flag,value);
	} else {
		_this.h[flag] = value;
	}
};
util_FlagManager.get = function(flag) {
	var _this = util_FlagManager.map;
	if(__map_reserved[flag] != null ? _this.existsReserved(flag) : _this.h.hasOwnProperty(flag)) {
		var _this1 = util_FlagManager.map;
		if(__map_reserved[flag] != null) {
			return _this1.getReserved(flag);
		} else {
			return _this1.h[flag];
		}
	} else {
		return false;
	}
};
var util_LinkManager = function() { };
util_LinkManager.go_to_link = function(url) {
	if(Math.abs(App.i.content_container.total_move) > util_LinkManager.move_threshold) {
		return;
	}
	if(util_CardManager.exists(url)) {
		App.i.content_container.load_card(url);
	} else {
		window.location.href = url;
	}
};
var util_PointsManager = function() { };
util_PointsManager.receive_pts = function(title,amt) {
	var _this = util_PointsManager.earned;
	if(__map_reserved[title] != null ? _this.existsReserved(title) : _this.h.hasOwnProperty(title)) {
		return;
	}
	var _this1 = util_PointsManager.earned;
	if(__map_reserved[title] != null) {
		_this1.setReserved(title,amt);
	} else {
		_this1.h[title] = amt;
	}
	App.theme.load_points(amt);
};
var util_ResizeUtil = function() { };
util_ResizeUtil.resize = function() {
	var _fn = function() {
		return;
	};
	var _g = new haxe_iterators_MapKeyValueIterator(util_ResizeUtil.resize_map);
	while(_g.hasNext()) {
		var _g1 = _g.next();
		var object = _g1.key;
		var fn = _g1.value;
		if(object == App.i.content_container) {
			_fn = fn;
			continue;
		}
		if(object != null) {
			fn();
		}
	}
	_fn();
};
var zero_extensions_ArrayExt = function() { };
zero_extensions_ArrayExt.remove_duplicates = function(arr) {
	var processed = [];
	var _g = 0;
	while(_g < arr.length) {
		var o = arr[_g];
		++_g;
		if(processed.indexOf(o) >= 0) {
			HxOverrides.remove(arr,o);
		} else {
			processed.push(o);
		}
	}
	return arr;
};
var zero_utilities_Timer = function() {
};
zero_utilities_Timer.get = function(time,fn,repeat) {
	if(repeat == null) {
		repeat = 1;
	}
	var timer = zero_utilities_Timer.pool.length > 0 ? zero_utilities_Timer.pool.shift() : new zero_utilities_Timer();
	timer.time = time;
	timer.fn = fn;
	timer.repeat = repeat;
	timer.paused = false;
	timer.elapsed = 0;
	zero_utilities_Timer.timers.push(timer);
	return timer;
};
zero_utilities_Timer.update = function(dt) {
	var _g = 0;
	var _g1 = zero_utilities_Timer.timers;
	while(_g < _g1.length) {
		var timer = _g1[_g];
		++_g;
		timer.run(dt);
	}
};
zero_utilities_Timer.prototype = {
	cancel: function() {
		if(HxOverrides.remove(zero_utilities_Timer.timers,this)) {
			zero_utilities_Timer.pool.push(this);
		}
	}
	,run: function(dt) {
		if(this.paused) {
			return;
		}
		this.elapsed += dt;
		if(this.time - this.elapsed > zero_utilities_Timer.epsilon) {
			return;
		}
		this.fn();
		this.elapsed = 0;
		this.repeat--;
		if(this.repeat != 0) {
			return;
		}
		this.cancel();
	}
};
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
if(typeof $global.$haxeUID == "undefined") $global.$haxeUID = 0;
haxe_ds_ObjectMap.count = 0;
var __map_reserved = {};
themes_Styles.text_main = new PIXI.TextStyle({ fill : 2105376, wordWrap : true, fontSize : 18});
themes_Styles.text_button = new PIXI.TextStyle({ fill : 16777215, wordWrap : true, fontSize : 16});
themes_Styles.text_textbox = new PIXI.TextStyle({ fill : 16777215, wordWrap : true, fontSize : 20});
util_FlagManager.map = new haxe_ds_StringMap();
util_LinkManager.move_threshold = 8;
util_PointsManager.earned = new haxe_ds_StringMap();
util_ResizeUtil.resize_map = new haxe_ds_ObjectMap();
zero_utilities_Timer.timers = [];
zero_utilities_Timer.pool = [];
zero_utilities_Timer.epsilon = 1e-8;
App.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
